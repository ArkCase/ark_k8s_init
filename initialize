#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"

set -euo pipefail

export BASE_DIR="$(dirname "${SCRIPT}")"
export SCRIPT_DIR="${BASE_DIR}/.scripts"
export CONF_DIR="${BASE_DIR}/conf"

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

doing()
{
	say "👉 ${@}"
}

err()
{
	say "❌ ${@}"
}

fail()
{
	err "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

list_kernels()
{
	dpkg -l | egrep "linux-image-[56]" | awk '{ print $2 }' | sort -u
}

if [ "$(/usr/bin/id -u)" != "0" ] ; then

	# Make sure these are visible "below"
	[ -v CLUSTER_CIDR ] && export CLUSTER_CIDR
	[ -v SERVICE_CIDR ] && export SERVICE_CIDR

	#
	# Take stock of the kernel versions installed
	#
	OLD_KERNELS="$(list_kernels)" || true

	#
	# Do the rooty-things
	#
	doing "Not running as root, must escalate privileges!"
	sudo -EH "${0}" "${@}" || fail "Root installation tasks failed (rc=${?})!"
	ok "Root portions completed!"

	#
	# Take stock of the new kernel versions installed
	#
	NEW_KERNELS="$(list_kernels)" || true

	#
	# Now do the things that my user needs
	#

	#
	# Set up the K8s configuration
	#
	"${SCRIPT_DIR}/init-kubeconfig"

	#
	# Initialize the user-based stuff (i.e. helm repos+charts, support charts, etc)
	#
	"${SCRIPT_DIR}/init-user"

	#
	# Configure AWS CLI for the calling user
	#
	"${SCRIPT_DIR}/init-aws-config"

	#
	# Wait for the pods to finish booting
	#
	"${SCRIPT_DIR}/wait-for-pods"

	echo ""
	echo ""
	echo ""
	ok "Installation completed. You should now be able to operate Docker and Kubernetes locally"
	echo ""

	if docker ps -a &>/dev/null ; then
		ok "Docker control is enabled"
	else
		err "Your group memberships haven't been updated, you must log out and back in to enable control of Docker"
	fi
	echo ""

	if kubectl --context "local" get pods -A &>/dev/null ; then
		ok "Kubernetes control is enabled"
	else
		err "Your Kubernetes configuration seems to be incorrect, please fix it before continuing. Feel free to ask for help if you feel it's necessary."
	fi
	echo ""

	if [ "${OLD_KERNELS}" != "${NEW_KERNELS}" ] ; then
		doing "New kernels were installed, it's strongly recommended that you reboot to ensure the latest software is running."
		echo ""
	fi

	exit 0
fi

################################################################################
#
# EVERYTHING BELOW THIS POINT IS DONE WITH ELEVATED PRIVILEGES, SO BE CAREFUL!
#
################################################################################

is_installed()
{
	local PKG="${1}"
	apt -qq list "${PKG}" --installed 2>/dev/null | fgrep -q  "[installed]" && return 0
	return 1
}

TRUSTED_GPG_DIR="/etc/apt/trusted.gpg.d"
APT_SOURCES_DIR="/etc/apt/sources.list.d"

[ -v SUDO_USER ] && ok "Privileges escalated! Proceeding with the installation"

#
# Full updates
#
doing "Performing a full package update..."
apt-get update && apt-get -f -y dist-upgrade && apt-get clean

#
# Extra packages
#
EXTRA_PACKAGES=(
	apt-transport-https
	ca-certificates
	curl
	git
	gnupg
	jq
	moreutils
	net-tools
	procps
	screen
	telnet
	wget
)
MISSING_PACKAGES=()
for P in "${EXTRA_PACKAGES[@]}" ; do
	is_installed "${P}" || MISSING_PACKAGES+=("${P}")
done
if [ ${#MISSING_PACKAGES[@]} -eq 0 ] ; then
	ok "All required packages are installed"
else
	doing "Installing extra packages: [${MISSING_PACKAGES[@]}]..."
	apt-get install -y "${MISSING_PACKAGES[@]}"
fi

#
# Disable swap
#
if [ -z "$(swapon --show --noheadings --raw)" ] ; then
	ok "Swap is disabled as required by Kubernetes"
else
	doing "Disabling swap (required by Kubernetes)"
	swapoff -a
	grep -v "[[:space:]]swap[[:space:]]" /etc/fstab | sponge /etc/fstab
fi

#
# Install and configure Docker
#
if ! docker ps -a &>/dev/null ; then
	if ! is_installed docker ; then
		[ -v DOCKER_DISTRO ] || DOCKER_DISTRO=""
		[ -n "${DOCKER_DISTRO}" ] || DOCKER_DISTRO="jammy"
		doing "Installing Docker..."
		rm -f "${TRUSTED_GPG_DIR}/docker.gpg" &>/dev/null || true
		curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | gpg --dearmor -o "${TRUSTED_GPG_DIR}/docker.gpg"
		chmod a+r "${TRUSTED_GPG_DIR}/docker.gpg"
		echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu ${DOCKER_DISTRO} stable" > "${APT_SOURCES_DIR}/docker.list"
		apt-get update

		mkdir -p /etc/docker
		cat <<-EOF > /etc/docker/daemon.json
		{
			"ipv6": false,
			"exec-opts": ["native.cgroupdriver=systemd"],
			"log-driver": "json-file",
			"log-opts": {"max-size": "100m" },
			"storage-driver": "overlay2"
		}
		EOF
		apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
		[ -v SUDO_USER ] && usermod -a -G docker "${SUDO_USER}"
	fi
	ok "Docker is already installed"

	doing "Enabling the Docker service..."
	systemctl enable --now docker.service docker.socket
	docker run hello-world
fi
ok "Docker is installed and running"

if ! systemctl is-active --quiet cri-docker.service  ; then
	if ! is_installed cri-dockerd ; then
		[ -v CRI_VER ] || CRI_VER=""
		[ -n "${CRI_VER}" ] || CRI_VER="0.3.4"
		[ -v CRI_DISTRO ] || CRI_DISTRO=""
		[ -n "${CRI_DISTRO}" ] || CRI_DISTRO="jammy"
		doing "Installing CRI-Docker v${CRI_VER} (${CRI_DISTRO})..."
		wget "https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VER}/cri-dockerd_${CRI_VER}.3-0.ubuntu-${CRI_DISTRO}_amd64.deb"
		apt-get install -y "./cri-dockerd_${CRI_VER}.3-0.ubuntu-${CRI_DISTRO}_amd64.deb"
		rm -rf "./cri-dockerd_${CRI_VER}.3-0.ubuntu-${CRI_DISTRO}_amd64.deb" || true
	fi
	ok "CRI-Docker is installed"

	doing "Enabling CRI-Docker..."
	systemctl enable --now cri-docker.service cri-docker.socket
	# This will verify that it's running
	systemctl is-active --quiet cri-docker.service
fi
ok "CRI-Docker is installed and running"

#
# Install Helm
#
if ! helm version &>/dev/null ; then
	[ -v HELM_VER ] || HELM_VER=""
	[ -n "${HELM_VER}" ] || HELM_VER="3.12.3"
	doing "Installing Helm v${HELM_VER}..."
	curl -fsSL https://get.helm.sh/helm-v${HELM_VER}-linux-amd64.tar.gz | tar -C /usr/local/bin --strip-components=1 -xzvf - linux-amd64/helm
	helm version &>/dev/null
fi
ok "Helm is installed"

#
# Install Kubernetes
#
if ! kubeadm version &>/dev/null ; then
	[ -v K8S_VER ] || K8S_VER=""
	[ -n "${K8S_VER}" ] || K8S_VER="1.30"
	doing "Installing Kubernetes v${K8S_VER}..."
	rm -f "${TRUSTED_GPG_DIR}/kubernetes.gpg" &>/dev/null || true
	curl -fsSL "https://pkgs.k8s.io/core:/stable:/v${K8S_VER}/deb/Release.key" | gpg --dearmor -o "${TRUSTED_GPG_DIR}/kubernetes.gpg"
	echo "deb https://pkgs.k8s.io/core:/stable:/v${K8S_VER}/deb/ /" > "${APT_SOURCES_DIR}/kubernetes.list"
	apt-get update
	apt-get install -y kubelet kubeadm kubectl
fi
ok "Kubernetes is installed"

#
# Initialize the K8s node
#
if ! kubectl --context "local" get pods -A &>/dev/null ; then
	(
		doing "Initializing the Kubernetes cluster node..."
		set -euo pipefail
		cd "${BASE_DIR}"
		( cd tools && tar -czf - . ) | tar -C /usr/local/bin -xzvf -
		[ -v CLUSTER_CIDR ] && echo "	👉 CLUSTER_CIDR=[${CLUSTER_CIDR}]"
		[ -v SERVICE_CIDR ] && echo "	👉 SERVICE_CIDR=[${SERVICE_CIDR}]"
		"${SCRIPT_DIR}/init-cluster"
	)
fi
ok "The Kubernetes node is initialized"

#
# Configure the local DNS stuff
#
(
	doing "Initializing the local DNS resolver to connect to the cluster..."
	set -euo pipefail
	"${SCRIPT_DIR}/init-local-dns"
)

#
# Install AWS CLI
#
if ! aws --version &>/dev/null ; then
	(
		doing "Installing AWS CLI..."
		set -euo pipefail
		cd
		curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unzip awscliv2.zip
		./aws/install "${UPGRADE_FLAGS[@]}"
		rm -rf aws awscliv2.zip
		aws --version
	)
fi
ok "AWS CLI is installed"

#
# Configure AWS CLI for root
#
"${SCRIPT_DIR}/init-aws-config"
