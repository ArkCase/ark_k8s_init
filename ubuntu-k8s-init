#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

SCRIPTS="${BASEDIR}/.scripts"

DEFAULT_K8S_ENGINE="k3d"

list_kernels()
{
	dpkg -l | egrep "linux-image-[56]" | awk '{ print $2 }' | sort -u
}

if [ "$(/usr/bin/id -u)" != "0" ] ; then

	# Make sure these are visible "below"
	[ -v CLUSTER_CIDR ] && export CLUSTER_CIDR
	[ -v SERVICE_CIDR ] && export SERVICE_CIDR

	#
	# Take stock of the kernel versions installed
	#
	OLD_KERNELS="$(list_kernels)" || true

	#
	# Do the rooty-things
	#
	say "👉 Not running as root, must escalate privileges!"
	sudo -EH "${0}" "${@}" || fail "\tRoot installation tasks failed (rc=${?})!"
	say "\t✅ Root portions completed!"
	exit 0

	#
	# Take stock of the new kernel versions installed
	#
	NEW_KERNELS="$(list_kernels)" || true

	#
	# Now do the things that my user needs
	#

	#
	# Set up the K8s configuration
	#
	mkdir -p ~/.kube
	say "👉 Configuring your K8s cluster settings"
	ADMIN_CONF="/etc/kubernetes/admin.conf"
	if [ -f "${ADMIN_CONF}" ] ; then
		sudo cat "${ADMIN_CONF}"
	else
		k3d kubeconfig get -a
	fi > ~/.kube/config
	chown -R "${USER}:" ~/.kube
	chmod -R go-rwx ~/.kube

	#
	# Configure AWS CLI for the calling user
	#
	"${SCRIPTS}/init-aws-config"

	say ""
	say "\t✅ Installation completed. You should now be able to operate"
	say "\t   Docker and Kubernetes locally"
	say ""

	if docker ps -a &>/dev/null ; then
		say "\t✅ Docker control is enabled"
	else
		say "\t❌ Your group memberships haven't been updated, you must"
		say "\t   log out and back in to enable control of Docker"
	fi
	say ""

	if kubectl get pods -A &>/dev/null ; then
		say "\t✅ Kubernetes control is enabled"
	else
		say "\t❌ Your Kubernetes configuration seems to be incorrect,"
		say "\t   please fix it before continuing. Feel free to ask for"
		say "\t   help if you feel it's necessary."
	fi
	say ""

	if [ "${OLD_KERNELS}" != "${NEW_KERNELS}" ] ; then
		say "\t👉 New kernels were installed, it's strongly recommended that you"
		say "\t   reboot to ensure the latest software is running."
		say ""
	fi

	exit 0
fi

is_installed() {
	local PKG="${1}"
	apt -qq list "${PKG}" --installed 2>/dev/null | fgrep -q  "[installed]" && return 0
	return 1
}

TRUSTED_GPG_DIR="/etc/apt/trusted.gpg.d"
APT_SOURCES_DIR="/etc/apt/sources.list.d"

[ -v SUDO_USER ] && say "✅ Privileges escalated! Proceeding with the installation"

#
# Full updates
#
say "👉 Performing a full package update..."
apt-get update && apt-get -f -y dist-upgrade && apt-get clean

#
# Extra packages
#
EXTRA_PACKAGES=(
	apt-transport-https
	ca-certificates
	curl
	git
	gnupg
	jq
	moreutils
	netcat
	net-tools
	procps
	screen
	telnet
	wget
)
MISSING_PACKAGES=()
for P in "${EXTRA_PACKAGES[@]}" ; do
	is_installed "${P}" || MISSING_PACKAGES+=("${P}")
done
if [ ${#MISSING_PACKAGES[@]} -eq 0 ] ; then
	say "✅ All required packages are installed"
else
	say "👉 Installing extra packages: [${MISSING_PACKAGES[@]}]..."
	apt-get install -y "${MISSING_PACKAGES[@]}"
fi

#
# Disable swap
#
if [ -z "$(swapon --show --noheadings --raw)" ] ; then
	say "✅ Swap is disabled as required by Kubernetes"
else
	say "👉 Disabling swap (required by Kubernetes)"
	swapoff -a
	grep -v "[[:space:]]swap[[:space:]]" /etc/fstab | sponge /etc/fstab
fi

#
# Install and configure Docker
#
if docker ps -a &>/dev/null ; then
	say "✅ Docker is already installed and running"
else

	if is_installed docker ; then
		say "✅ Docker is already installed"
	else
		[ -v DOCKER_DISTRO ] || DOCKER_DISTRO=""
		[ -n "${DOCKER_DISTRO}" ] || DOCKER_DISTRO="jammy"
		say "👉 Installing Docker..."
		rm -f "${TRUSTED_GPG_DIR}/docker.gpg" &>/dev/null || true
		curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | gpg --dearmor -o "${TRUSTED_GPG_DIR}/docker.gpg"
		chmod a+r "${TRUSTED_GPG_DIR}/docker.gpg"
		echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu ${DOCKER_DISTRO} stable" > "${APT_SOURCES_DIR}/docker.list"
		apt-get update

		mkdir -p /etc/docker
		cat <<-EOF > /etc/docker/daemon.json
		{
			"ipv6": false,
			"exec-opts": ["native.cgroupdriver=systemd"],
			"log-driver": "json-file",
			"log-opts": {"max-size": "100m" },
			"storage-driver": "overlay2"
		}
		EOF
		apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
		[ -v SUDO_USER ] && usermod -a -G docker "${SUDO_USER}"
	fi

	say "👉 Enabling the Docker service..."
	systemctl enable --now docker.service docker.socket
	docker run hello-world
fi

if systemctl is-active --quiet cri-docker.service  ; then
	say "✅ CRI-Docker is already installed and running"
else
	if is_installed cri-dockerd ; then
		say "✅ CRI-Docker is already installed"
	else
		[ -v CRI_VER ] || CRI_VER=""
		[ -n "${CRI_VER}" ] || CRI_VER="0.3.4"
		[ -v CRI_DISTRO ] || CRI_DISTRO=""
		[ -n "${CRI_DISTRO}" ] || CRI_DISTRO="jammy"
		say "👉 Installing CRI-Docker v${CRI_VER} (${CRI_DISTRO})..."
		wget "https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VER}/cri-dockerd_${CRI_VER}.3-0.ubuntu-${CRI_DISTRO}_amd64.deb"
		apt-get install -y "./cri-dockerd_${CRI_VER}.3-0.ubuntu-${CRI_DISTRO}_amd64.deb"
		rm -rf "./cri-dockerd_${CRI_VER}.3-0.ubuntu-${CRI_DISTRO}_amd64.deb" || true
	fi
	say "👉 Enabling CRI-Docker..."
	systemctl enable --now cri-docker.service cri-docker.socket
	# This will verify that it's running
	systemctl is-active --quiet cri-docker.service
fi

#
# Install Helm
#
if helm version &>/dev/null ; then
	say "✅ Helm is already installed"
else
	[ -v HELM_VER ] || HELM_VER=""
	[ -n "${HELM_VER}" ] || HELM_VER="3.12.3"
	say "👉 Installing Helm v${HELM_VER}..."
	curl -fsSL https://get.helm.sh/helm-v${HELM_VER}-linux-amd64.tar.gz | tar -C /usr/local/bin --strip-components=1 -xzvf - linux-amd64/helm
	helm version &>/dev/null
fi

#
# Install Kubernetes
#
if kubectl version &>/dev/null ; then
	say "✅ Kubernetes already installed"
else
	[ -v K8S_VER ] || K8S_VER=""
	[ -n "${K8S_VER}" ] || K8S_VER="1.28"
	say "👉 Installing Kubernetes v${K8S_VER}..."
	rm -f "${TRUSTED_GPG_DIR}/kubernetes.gpg" &>/dev/null || true
	curl -fsSL "https://pkgs.k8s.io/core:/stable:/v${K8S_VER}/deb/Release.key" | gpg --dearmor -o "${TRUSTED_GPG_DIR}/kubernetes.gpg"
	echo "deb https://pkgs.k8s.io/core:/stable:/v${K8S_VER}/deb/ /" > "${APT_SOURCES_DIR}/kubernetes.list"
	apt-get update
	apt-get install -y kubectl

	[ -v K8S_ENGINE ] || K8S_ENGINE=""
	[ -n "${K8S_ENGINE}" ] || K8S_ENGINE="${DEFAULT_K8S_ENGINE}"
	export K8S_ENGINE="${K8S_ENGINE,,}"
	case "${K8S_ENGINE}" in
		k3d )	[ -v K3D_URL ] || K3D_URL=""
			[ -n "${K3D_URL}" ] || K3D_URL="https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh"

			[ -v K3D_TAG ] || K3D_TAG=""
			[ -n "${K3D_TAG}" ] && export TAG="${K3D_TAG}"
			say "👉 Installing K3d (${TAG:-latest}) from [${K3D_URL}] ..."
			curl -fsSL "${K3D_URL}" | bash
			unset TAG
			;;

		k8s )	say "👉 Installing Kubelet & Kubeadm v${K8S_VER}..."
			apt-get install -y kubelet kubeadm
			;;

		* )	fail "❌ unknown K8s engine [${K8S_ENGINE}]" ;;
	esac

	(
		say "👉 Initializing the Kubernetes ${K8S_ENGINE} cluster node..."
		set -euo pipefail
		cd "${BASEDIR}"
		( cd tools && tar -czf - . ) | tar -C /usr/local/bin -xzvf -
		[ -v CLUSTER_CIDR ] && say "\t👉 CLUSTER_CIDR=[${CLUSTER_CIDR}]"
		[ -v SERVICE_CIDR ] && say "\t👉 SERVICE_CIDR=[${SERVICE_CIDR}]"
		exec ./initialize
	) || fail "❌ failed to initialize the ${K8S_ENGINE} cluster (rc=${?})"
fi

#
# Initialize the K8s node
#
if kubectl get pods -A &>/dev/null ; then
	say "✅ The Kubernetes node is already initialized"
else
	fail "The Kubernetes node doesn't appear to be propely initialized"
fi

#
# Install AWS CLI
#
if aws --version &>/dev/null ; then
	say "✅ AWS CLI already installed"
else
	(
		say "👉 Installing AWS CLI..."
		set -euo pipefail
		cd
		curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unzip awscliv2.zip
		./aws/install "${UPGRADE_FLAGS[@]}"
		rm -rf aws awscliv2.zip
		aws --version
	)
fi

#
# Configure AWS CLI for root
#
"${SCRIPTS}/init-aws-config"
