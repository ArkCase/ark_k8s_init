#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

err()
{
	say "❌ ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

cleanup()
{
	rm -rf "${NEW_CONFIG}" &>/dev/null || true
}

CURRENT_USER="$(id -un)"
HOME="$(eval echo ~${CURRENT_USER})"

if [ ! -d "${HOME}" ] ; then
	err "❌ No home directory [${HOME}] for user [${CURRENT_USER}] ... can't configure the Kubeconfig"
	exit 0
fi

KUBE_DIR="${HOME}/.kube"
MASTER="${KUBE_DIR}/config"
NEW_CONFIG="/etc/kubernetes/admin.conf"

say "👉 Configuring your K8s cluster access settings"
TGT="$(mktemp)"
sudo cat "${NEW_CONFIG}" > "${TGT}"
NEW_CONFIG="${TGT}"
trap cleanup EXIT
unset TGT

# Change the names for convenience
sed -i \
	-e 's;\(user\|name\):\s\+kubernetes-admin$;\1: local;g' \
	-e 's;\(cluster\|name\):\s\+kubernetes$;\1: local;g' \
	-e 's;\(current-context\|name\):\s\+kubernetes-admin@kubernetes$;\1: local;g' \
	"${NEW_CONFIG}"

export KUBECONFIG="${NEW_CONFIG}:${MASTER}"
mkdir -p "${KUBE_DIR}"

say "👉 Merging the kubeconfig data into the master file"
kubectl config view --flatten | sponge "${MASTER}"

# Make sure we're using the local context
kubectl config use-context local || fail "Failed to set the current context to 'local'"

chown -R "${CURRENT_USER}:" "${KUBE_DIR}"
chmod -R go-rwx "${KUBE_DIR}"

kubectl config get-contexts
ok "Cluster access configured"
