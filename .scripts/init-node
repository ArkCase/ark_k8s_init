#!/bin/bash
SCRIPT="$(readlink -f "${0}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

say()
{
	echo -e "${@}"
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

cleanup()
{
	if [ -v KUBEADM_CONFIG_FILE ] ; then
		[ -n "${KUBEADM_CONFIG_FILE}" ] && rm -f "${KUBEADM_CONFIG_FILE}" &>/dev/null || true
	fi
}

echo_run() {
	local ARGS=("${@}")
	echo "${ARGS[@]@Q}"
	"${@}"
}

trap cleanup EXIT

CRI_SOCKETS=(/var/run/cri-dockerd.sock /var/run/crio/crio.sock /var/run/containerd/containerd.sock)
CRI=""
for SOCKET in "${CRI_SOCKETS[@]}" ; do
	if [ -S "${SOCKET}" ] ; then
		CRI="unix://${SOCKET}"
		break
	fi
done
[ -n "${CRI}" ] || { echo "❌ Failed to find the CRI socket from the candidates [${CRI_SOCKETS[@]}]" ; exit 1 ; }

[ -v CLUSTER_CIDR ] || CLUSTER_CIDR="10.96.0.0/12"
[ -v SERVICE_CIDR ] || SERVICE_CIDR="${CLUSTER_CIDR}"

LOCAL_ONLY_NAME="K8s-Local"
LOCAL_ONLY_ENDPOINT="k8s.cluster.prv"
LOCAL_ONLY_IFACE="kubelocal0"
LOCAL_ONLY_ADDX="10.255.255.254"

# From what we've seen, this is harmless if used all the time. However,
# the exposure of this variable means that we can easily enough initialize
# control plane nodes designed to use a shared endpoint IP (remember to
# set up the HAP facade first!).
[ -v CONTROL_PLANE_ENDPOINT ] || CONTROL_PLANE_ENDPOINT=""
[ -n "${CONTROL_PLANE_ENDPOINT}" ] || CONTROL_PLANE_ENDPOINT="${LOCAL_ONLY_ENDPOINT}"

if [ "${CONTROL_PLANE_ENDPOINT}" == "${LOCAL_ONLY_ENDPOINT}" ] ; then

	# Make sure the virtual interface exists
	say "👉 Creating the ${LOCAL_ONLY_IFACE} virtual interface..."

	# First things first ... use NetworkManager (nmcli) or Systemd-Networkd?
	if nmcli con show --active &>/dev/null ; then
		if nmcli con show "${LOCAL_ONLY_NAME}" &>/dev/null ; then
			say "\t✅ The interface already exists!"
		else
			nmcli conn add type dummy con-name "${LOCAL_ONLY_NAME}" ifname "${LOCAL_ONLY_IFACE}" ip4 "${LOCAL_ONLY_ADDX}/32" || fail "Failed to create the K8s virtual interface"
			say "\t✅ The interface was created!"
		fi
	elif systemctl status systemd-networkd.service &>/dev/null ; then
		SYSTEMD_DIR="/etc/systemd/network"
		[ -d "${SYSTEMD_DIR}" ] || mkdir -p "${SYSTEMD_DIR}" || fail "Failed to locate or create the network directory at [${SYSTEMD_DIR}]"

		# Do the Systemd-Networkd configuration
		cat >> "/etc/systemd/network/10-${LOCAL_ONLY_IFACE}.netdev" <<-EOF
		[NetDev]
		Name=${LOCAL_ONLY_IFACE}
		Kind=dummy
		EOF

		cat >> "/etc/systemd/network/10-${LOCAL_ONLY_IFACE}.network" <<-EOF
		[Match]
		Name=${LOCAL_ONLY_IFACE}

		[Network]
		Address=${LOCAL_ONLY_ADDX}/32
		EOF

		systemctl restart systemd-networkd.service || fail "Failed to restart the networking service"
	else
		fail "You must have either NetworkManager or systemd-networkd running to configure the persistent virtual interface, or configure it manually beforehand (name=${LOCAL_ONLY_IFACE}, preferred IP=${LOCAL_ONLY_ADDX})"
	fi

	read INET ADDX BRD BCAST REST < <(ip addr show "${LOCAL_ONLY_IFACE}" | egrep '^[[:space:]]*inet[[:space:]]+(0|[1-9])') || true
	if [ -n "${ADDX}" ] ; then
		LOCAL_ONLY_ADDX="${ADDX%%/*}"
	else
		ip addr add "${LOCAL_ONLY_ADDX}/32" dev "${LOCAL_ONLY_IFACE}" || fail "Failed to assign the IP address to ${LOCAL_ONLY_IFACE}"
	fi
	say "\t✅ The interface is assigned address [${LOCAL_ONLY_ADDX}]"

	# Make sure the interface is persistent

	# Make sure the virtual interface's IP address is listed in /etc/hosts
	FILTERED_HOSTS="$(cat /etc/hosts | sed -e "/^.*\s${LOCAL_ONLY_ENDPOINT}\(\s.*\)\?$/d")"
	cat > /etc/hosts <<-EOF
	${FILTERED_HOSTS}
	${LOCAL_ONLY_ADDX} ${LOCAL_ONLY_ENDPOINT}
	EOF
fi

echo_run systemctl stop kubelet || true
echo_run systemctl start kubelet || fail "Failed to start kubelet"

KUBEADM_CONFIG=""
read -r -d '' VAR <<-EOF || true
	---
	apiVersion: kubeadm.k8s.io/v1beta3
	kind: InitConfiguration
	nodeRegistration:
	  criSocket: ${CRI}
EOF
KUBEADM_CONFIG+="${VAR}"
KUBEADM_CONFIG+=$'\n'

if [ "${CONTROL_PLANE_ENDPOINT}" == "${LOCAL_ONLY_ENDPOINT}" ] ; then
	read -r -d '' VAR <<-EOF || true
		localAPIEndpoint:
		  advertiseAddress: ${LOCAL_ONLY_ADDX}
	EOF
	KUBEADM_CONFIG+="${VAR}"
	KUBEADM_CONFIG+=$'\n'
fi

read -r -d '' VAR <<-EOF || true
	---
	apiVersion: kubeadm.k8s.io/v1beta3
	kind: ClusterConfiguration
	controlPlaneEndpoint: ${CONTROL_PLANE_ENDPOINT}
	networking:
	  serviceSubnet: ${SERVICE_CIDR}
	  podSubnet: ${CLUSTER_CIDR}
EOF
KUBEADM_CONFIG+="${VAR}"
KUBEADM_CONFIG+=$'\n'

if [ "${CONTROL_PLANE_ENDPOINT}" == "${LOCAL_ONLY_ENDPOINT}" ] ; then
	read -r -d '' VAR <<-EOF || true
		apiServer:
		  certSANs:
		    - 127.0.0.1
		    - localhost
		    - localhost.localdomain
		    - ${LOCAL_ONLY_ENDPOINT}
		etcd:
		  local:
		    serverCertSANs:
		      - 127.0.0.1
		      - localhost
		      - localhost.localdomain
		      - ${LOCAL_ONLY_ENDPOINT}
		    peerCertSANs:
		      - 127.0.0.1
		      - localhost
		      - localhost.localdomain
		      - ${LOCAL_ONLY_ENDPOINT}
		    extraArgs:
		      listen-client-urls: https://${LOCAL_ONLY_ADDX}:2379
		      advertise-client-urls: https://${LOCAL_ONLY_ADDX}:2379
		      listen-peer-urls: https://${LOCAL_ONLY_ADDX}:2380
		      initial-advertise-peer-urls: https://${LOCAL_ONLY_ADDX}:2380
	EOF
	KUBEADM_CONFIG+="${VAR}"
	KUBEADM_CONFIG+=$'\n'
fi

KUBEADM_CONFIG_FILE="$(mktemp --suffix=.yaml)"
echo "${KUBEADM_CONFIG}" > "${KUBEADM_CONFIG_FILE}"

# Next, init the cluster
echo_run kubeadm init \
	--config "${KUBEADM_CONFIG_FILE}" \
	--upload-certs || fail "Failed to run the kubeadm init command"

CA_UPDATER=()
CA_UPDATER+=(update-ca-trust:/etc/pki/ca-trust/source/anchors)
CA_UPDATER+=(update-ca-certificates:/usr/local/share/ca-certificates/)
for updater in "${CA_UPDATER[@]}" ; do
	IFS=":" read ca target <<< "${updater}"
	if type -P "${ca}" &>/dev/null ; then
		echo_run cp -vf /etc/kubernetes/pki/ca.crt "${target}"/k8s-ca.crt
		RC=0
		echo_run "${ca}" || RC=${?}
		[ ${RC} -eq 0 ] || echo "WARNING: ${ca} returned ${RC} ... certificate trusts may be incomplete!"
		break
	fi
done

echo_run mkdir -p "${HOME}/.kube" || true
echo_run cp -vi /etc/kubernetes/admin.conf "${HOME}/.kube/config"
echo_run chown -v $(id -u):$(id -g) "${HOME}/.kube/config"

# This will need to be run after each added node
echo_run kubectl taint nodes --all node-role.kubernetes.io/master- || true
# ONLY FOR SINGLE-NODE CLUSTERS
echo_run kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true

# Some short display stuff
echo_run kubectl get nodes
echo_run kubectl get pods --all-namespaces
