#!/bin/bash
SCRIPT="$(readlink -f "${0}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

CRI_SOCKETS=(/var/run/cri-dockerd.sock /var/run/crio/crio.sock /var/run/containerd/containerd.sock)
CRI=()
for SOCKET in "${CRI_SOCKETS[@]}" ; do
	if [ -S "${SOCKET}" ] ; then
		CRI=(--cri-socket "unix://${SOCKET}")
		break
	fi
done

[ -v CLUSTER_CIDR ] || CLUSTER_CIDR="10.96.0.0/12"
[ -v SERVICE_CIDR ] || SERVICE_CIDR="${CLUSTER_CIDR}"

# This will get populated as we go
FLAGS=(
	--pod-network-cidr "${CLUSTER_CIDR}"
	--service-cidr "${SERVICE_CIDR}"
)

[ -v CONTROL_PLANE_ENDPOINT ] && FLAGS+=(--control-plane-endpoint "${CONTROL_PLANE_ENDPOINT}")

echo_run() {
	local ARGS=("${@}")
	echo "${ARGS[@]@Q}"
	"${@}"
}

echo_run systemctl start kubelet

# Next, init the cluster
echo_run kubeadm init --upload-certs "${CRI[@]}" "${FLAGS[@]}"

CA_UPDATER=()
CA_UPDATER+=(update-ca-trust:/etc/pki/ca-trust/source/anchors)
CA_UPDATER+=(update-ca-certificates:/usr/local/share/ca-certificates/)
for updater in "${CA_UPDATER[@]}" ; do
	IFS=":" read ca target <<< "${updater}"
	if type -P "${ca}" &>/dev/null ; then
		echo_run cp -vf /etc/kubernetes/pki/ca.crt "${target}"/k8s-ca.crt
		RC=0
		echo_run "${ca}" || RC=${?}
		[ ${RC} -eq 0 ] || echo "WARNING: ${ca} returned ${RC} ... certificate trusts may be incomplete!"
		break
	fi
done

echo_run mkdir -p "${HOME}/.kube" || true
echo_run cp -vi /etc/kubernetes/admin.conf "${HOME}/.kube/config"
echo_run chown -v $(id -u):$(id -g) "${HOME}/.kube/config"

# This will need to be run after each added node
echo_run kubectl taint nodes --all node-role.kubernetes.io/master- || true
# ONLY FOR SINGLE-NODE CLUSTERS
echo_run kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true

# Some short display stuff
echo_run kubectl get nodes
echo_run kubectl get pods --all-namespaces
