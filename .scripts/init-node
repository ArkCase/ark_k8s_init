#!/bin/bash
SCRIPT="$(readlink -f "${0}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

echo_run() {
	local ARGS=("${@}")
	say "${ARGS[@]@Q}"
	"${@}"
}

[ -v K8S_ENGINE ] || fail "No K8S_ENGINE value is set"

CRI_SOCKETS=(/var/run/cri-dockerd.sock /var/run/crio/crio.sock /var/run/containerd/containerd.sock)
CRI=()
for SOCKET in "${CRI_SOCKETS[@]}" ; do
	if [ -S "${SOCKET}" ] ; then
		CRI=(--cri-socket "unix://${SOCKET}")
		break
	fi
done

[ -v CLUSTER_CIDR ] || CLUSTER_CIDR="10.96.0.0/12"
[ -v SERVICE_CIDR ] || SERVICE_CIDR="${CLUSTER_CIDR}"

# This will get populated as we go
FLAGS=(
	--pod-network-cidr "${CLUSTER_CIDR}"
	--service-cidr "${SERVICE_CIDR}"
)

case "${K8S_ENGINE}" in
	k3d )	k3d cluster create \
			--k3s-arg "--disable=local-storage@all:*" \
			--k3s-arg "--disable=traefik@all:*" \
			--k3s-arg "--disable=servicelb@all:*" || fail "Failed to initialize the k3d cluster (rc=${?})"
		echo_run mkdir -p "${HOME}/.kube" || true
		k3d kubeconfig get -a > "${HOME}/.kube/config"
		echo_run chown -v $(id -u):$(id -g) "${HOME}/.kube/config"
		exit 0
		;;

	k8s )	echo_run systemctl start kubelet

		# Next, init the cluster
		echo_run kubeadm init --upload-certs "${CRI[@]}" "${FLAGS[@]}"

		CA_UPDATER=()
		CA_UPDATER+=(update-ca-trust:/etc/pki/ca-trust/source/anchors)
		CA_UPDATER+=(update-ca-certificates:/usr/local/share/ca-certificates/)
		for updater in "${CA_UPDATER[@]}" ; do
			IFS=":" read ca target <<< "${updater}"
			if type -P "${ca}" &>/dev/null ; then
				echo_run cp -vf /etc/kubernetes/pki/ca.crt "${target}"/k8s-ca.crt
				RC=0
				echo_run "${ca}" || RC=${?}
				[ ${RC} -eq 0 ] || say "⚠️ WARNING: ${ca} returned ${RC} ... certificate trusts may be incomplete!"
				break
			fi
		done

		echo_run mkdir -p "${HOME}/.kube" || true
		echo_run cp -vi /etc/kubernetes/admin.conf "${HOME}/.kube/config"
		echo_run chown -v $(id -u):$(id -g) "${HOME}/.kube/config"

		# This will need to be run after each added node
		echo_run kubectl taint nodes --all node-role.kubernetes.io/master- || true
		# ONLY FOR SINGLE-NODE CLUSTERS
		echo_run kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
		;;

	* )	fail "Unsupported K8s engine [${K8S_ENGINE}]" ;;
esac

# Some short display stuff
echo_run kubectl get nodes || fail "Unable to enumerate the cluster's nodes... can't continue!"
echo_run kubectl get pods --all-namespaces || fail "Unable to enumerate the cluster's pods... can't continue!"
exit 0
