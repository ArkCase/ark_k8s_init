#!/bin/bash
set -euo pipefail

timestamp() {
	date -Ins -u
}

say() {
	echo -e "${@}"
}

fail() {
	say "‚ùå ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

RESOLVED="systemd-resolved.service"

# TODO: Should we query what systemd's state directory is?
[ -v SYSTEMD_DIR ] || SYSTEMD_DIR="/etc/systemd"
[ -d "${SYSTEMD_DIR}" ] || fail "No systemd status directory foudnd at [${SYSTEMD_DIR}] ... you may have to set it explicitly via the envvar SYSTEMD_DIR"

# Is systemd-resolved installed?
if ! systemctl list-unit-files "${RESOLVED}" --legend=false &>/dev/null ; then
	say "‚ö†Ô∏è Systemd's resolver is not installed, nothing to do here"
	exit 0
fi

# Ok ... so we're going to do this configuration ... let's escalate first!
if [ "$(/usr/bin/id -u)" != "0" ] ; then
	say "‚ö†Ô∏è Not running as root, must escalate privileges!"
	exec sudo -EH "PATH=${PATH}" "${0}" "${@}"
fi

# Keep track if the resolver daemon was running or not
RESOLVED_RUNNING="false"
systemctl status "${RESOLVED}" &>/dev/null && RESOLVED_RUNNING="true"

# Get the IP for the DNS service...
DNS_IP="$(kubectl get service -n kube-system kube-dns -o json | jq -r ".spec.clusterIP")" || fail "Failed to get the IP address for the kube-dns service"

# Get the cluster domain (separated by spaces)
CLUSTER_DOMAIN="$(kubectl get pod -n kube-system "$(kubectl get pod -n kube-system | grep "^kube-apiserver-" | awk '{ print $1 }')" -o json | jq -r '.spec.containers[].command[] | select(startswith("--service-account-issuer")) | sub("^.*=https://kubernetes[.]default[.]"; "default.")')"

# Make sure the target directory exists
TARGET_DIR="${SYSTEMD_DIR}/resolved.conf.d"
[ -d "${TARGET_DIR}" ] || mkdir -p "${TARGET_DIR}" || fail "Failed to create the configuration's target directory at [${TARGET_DIR}]"

# Construct the target filename
TARGET_FILE="${TARGET_DIR}/k8s-${CLUSTER_DOMAIN}.conf"

# Convert the cluster domain into an array ...
IFS="." read -a CLUSTER_DOMAIN <<< "${CLUSTER_DOMAIN}"

# Render the DNS search domains
set -- "${CLUSTER_DOMAIN[@]}"
DOMAINS=()
while [ ${#} -ge 2 ] ; do
	DOMAINS+=( "$(IFS="." ; echo "${*}")" )
	shift
done

# Render the final configuration file
say "‚úÖ Creating the new configuration at [${TARGET_FILE}] as:"
cat <<EOF | tee "${TARGET_FILE}"
[Resolve]
Cache=no
DNS=${DNS_IP}
Domains=${DOMAINS[@]}
EOF

# Restart the DNS resolver, if necessary
if "${RESOLVED_RUNNING}" ; then
	say "üëâ Restarting the local DNS service (${RESOLVED})..."
	systemctl restart "${RESOLVED}" &>/dev/null || fail "Failed to restart the local DNS service"
	say "‚úÖ Local DNS configuration has been activated"
else
	say "‚ö†Ô∏è  The local DNS service (${RESOLVED}) wasn't running, so this script won't start it - you must do so manually!"
fi
exit 0
